给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0

示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

代码：
#include<stdio.h>
int main(){
        int m,n;
        float ans=0;
        int nums1[100],nums2[100],num[100];
        scanf("%d %d",&m,&n);
        for(int i=0;i<m;i++){
                scanf("%d",&nums1[i]);
                num[i]=nums1[i];
        }
        for(int i=0;i<n;i++){
                scanf("%d",&nums2[i]);
                num[m+i]=nums2[i];
        }
        for(int i=0;i<(m+n);i++){
                for(int j=1;j<(m+n)-i;j++){
                        if(num[j-1]>num[j]){
                                int temp=num[j-1];
                                num[j-1]=num[j];
                                num[j]=temp;
                        }
                }
        }
        if((m+n)%2==0){
                ans=((num[(m+n)/2]+num[(m+n)/2-1])/2);
        }
        else{
                ans=num[(m+n-1)/2];
        }
        printf(".1%f\n",ans);
        return 0;
}
