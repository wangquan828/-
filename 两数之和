给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

代码：
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int* ans = (int *)malloc(2*sizeof(int));
    * returnSize = 0;
    for(int i = 0; i < numsSize; i++) {
        for(int j = i + 1; j < numsSize; j++) {
            if(nums[i] + nums[j] == target) {
                ans[0] = i;
                ans[1] = j;
                * returnSize = 2;
                return ans;
            }
        }
    }
return ans;
}

总结：
1.这道题较简单，我的思路就是最简单的遍历数组暴力求解。但是这样就会导致运行时间较长，占用内存较大，效率低。在LeetCode上刷题让我对程序的实用性开始有了思考，在题解里也看到很多大佬的解法，不断的优化程序使得程序运行速度更快。
2.学习了malloc函数动态分配内存空间。
3.在leetcode上做题与在OJ做有很大不同，这次很大一部分时间用在了熟悉LeetCode与GitHub的使用。
